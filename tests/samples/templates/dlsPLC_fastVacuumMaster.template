#% macro, __doc__, Template that reads 100 blocks of memory into records so 
# that it can be used in various templates.
# % macro, device, Device prefix
# % macro, fins_port, asyn port name of FINS driver
# % macro, eip_port, asyn port name of etherip driver
# % macro, timeout, asyn fins_port timeout
# % macro, id, id of the gauge, eg, 01,02 etc
# % macro, tagidx, Index for the eip tags
# % macro, em, em number in PLC
# % macro, wave0_addr, Address of waveform 0
# % macro, wave1_addr, Address of waveform 1
# % macro, wave2_addr, Address of waveform 2
# % macro, wave3_addr, Address of waveform 3
# % macro, wave4_addr, Address of waveform 4
# % macro, wave5_addr, Address of waveform 5

# Triggers the waveform read when PLC sets Data_Ready to 1
record(ai, "$(device):DATA_READY") {
  field(DTYP, "EtherIP")
  field(SCAN, ".1 second")
  field(INP, "@$(eip_port) FVA.Data_Ready[0] S .2")
}

record(calcout, "$(device):TRIGGER_READ") {
  field(CALC, "a")
  field(INPA, "$(device):DATA_READY CP")
  field(OOPT, "Transition To Non-zero")
  field(OUT,  "$(device):TIMESTAMP_S_RAW.PROC PP")
}

######################################################
# Timestamp records
# Timestamp in seconds from PLC
record(ai, "$(device):TIMESTAMP_S_RAW") {
  field(DTYP, "EtherIP")
  field(INP, "@$(eip_port) FVA.Capture_Time[0] S .2")
  field(FLNK,"$(device):TIMESTAMP_US_RAW PP")
  alias("$(device):TRIGGER")
}



# Timestamp in milliseconds from PLC
record(ai, "$(device):TIMESTAMP_US_RAW") {
  field(DTYP, "EtherIP")
  field(INP, "@$(eip_port) FVA.Capture_Time_us[0] S .2")
  field(FLNK,"$(device):TIMESTAMP_CALC PP")
}

# Concatenate timestamp in seconds and milliseconds to create time in float
# Subtract offset between EPICS epoch (1990) and UNIX epoch (1970)
record(calc, "$(device):TIMESTAMP_CALC") {
    field(DESC, "description")
    field(CALC, "(a+(b/1000000))-c")
    field(INPA, "$(device):TIMESTAMP_S_RAW")
    field(INPB, "$(device):TIMESTAMP_US_RAW")
    # POSIX_TIME_AT_EPICS_EPOCH
    field(C, "631152000")
    field(FLNK,"$(device):TIMESTAMP PP")
}

# This record sets its timestamp to its input via devSetTimeStamp
record(ai, "$(device):TIMESTAMP")
{
	field(DTYP, "Set Timestamp")
  field(INP,  "$(device):TIMESTAMP_CALC ")
	field(TSE,  "-2")	
  field(FLNK,"$(device):TIME_RES PP")
}

# Sample interval from PLC in ms
# % archiver 60 Monitor
record(ai, "$(device):TIME_RES") {
  field(DESC, "Sample interval from PLC in ms")
  field(DTYP, "EtherIP")
  field(INP, "@$(eip_port) FVA.Resolution[0] S .2")
  field(TSEL, "$(device):TIMESTAMP.TIME")
  field(FLNK,"$(device):PRE_SAMPLES PP")
}

# Number of samples in the data that take place before
# the trigger and timestamp
# % archiver 60 Monitor
record(ai, "$(device):PRE_SAMPLES") {
  field(DESC, "Number of samples before trigger")
  field(DTYP, "EtherIP")
  field(INP, "@$(eip_port) FVA.Pre_Samples[0] S .2")
  field(TSEL, "$(device):TIMESTAMP.TIME")
  #field(VAL, "500")
  field(FLNK,"$(device):FAN PP")
}

# Place holder for linking records
record(fanout, "$(device):FAN") {
  field(LNK1, "$(device):FAN_01 PP")
  field(LNK2, "$(device):FAN_02 PP")
  field(FLNK, "$(device):DATA_READY_CLEAR PP")
}
record(fanout, "$(device):FAN_01") {
}
record(fanout, "$(device):FAN_02") {
}

# Clear the Data_Ready in the PLC to indicate the data has been read
record(calcout, "$(device):DATA_READY_CLEAR") {
    field(CALC, "0")
    field(OUT,  "$(device):DATA_READY_CLEAR_W PP")
}

record(ao, "$(device):DATA_READY_CLEAR_W") {
  field(DTYP, "EtherIP")
  field(OUT, "@$(eip_port) FVA.Data_Ready[0] S .2")
}


# Records to display in the GUI the timestamp
# Used during commissioning to verify the PLC is sending the correct time
record(aSub, "$(device):PLC_TS_CONVERT") {
  field(SNAM, "plcTSConverter")
  field(INPA, "$(device):TIMESTAMP_S_RAW CP")
  field(FTA, "LONG")
  field(FTVA, "STRING")
  field(OUTA, "$(device):PLC_TS_STR PP")
}
record(stringout, "$(device):PLC_TS_STR") {
}

record(calc, "$(device):TIMESTAMP_INV_CALC") {
    field(DESC, "description")
    field(CALC, "a+b")
    field(INPA, "$(device):TIMESTAMP CP CP")
    # POSIX_TIME_AT_EPICS_EPOCH
    field(B, "631152000")
}
record(aSub, "$(device):EPICS_TS_CONVERT") {
  field(SNAM, "plcTSConverter")
  field(INPA, "$(device):TIMESTAMP_INV_CALC CP")
  field(FTA, "LONG")
  field(FTVA, "STRING")
  field(OUTA, "$(device):EPICS_TS_STR PP")
}
record(stringout, "$(device):EPICS_TS_STR") {
}

# # Global PVs to configure the system
# record(ao, "$(device):HYST_MULTI") {
#   field(DTYP, "EtherIP")
#   #SCAN must be Passive, otherwise the changes on the GUI aren't picked sometimes
#   field(SCAN, "Passive")
#   field(PREC, "2")
#   field(DRVH, "1.5")
#   field(DRVL, "0.5")
#   #Scan rate has to be set with S flag when SCAN does not specify a fixed-value scan rate (see ether_ipApp/doc/readme.txt)
#   field(OUT, "@$(eip_port) FVA.Hysteresis_Multiplier[0] S 0.5")
# }

# record(ai, "$(device):HYST_MULTI_RBV") {
#   field(DTYP, "EtherIP")
#   field(SCAN, "1 second")
#   field(EGU, "")
#   field(PREC, "2")
#   field(INP, "@$(eip_port) FVA.Hysteresis_Multiplier_RB[0]")
# }

# record(ao, "$(device):TRIG_MULTI") {
#   field(DTYP, "EtherIP")
#   #SCAN must be Passive, otherwise the changes on the GUI aren't picked sometimes
#   field(SCAN, "Passive")
#   field(PREC, "2")
#   field(DRVH, "1.5")
#   field(DRVL, "0.5")
#   #Scan rate has to be set with S flag when SCAN does not specify a fixed-value scan rate (see ether_ipApp/doc/readme.txt)
#   field(OUT, "@$(eip_port) FVA.Trigger_Multiplier[0] S 0.5")
# }

# record(ai, "$(device):TRIG_MULTI_RBV") {
#   field(DTYP, "EtherIP")
#   field(SCAN, "1 second")
#   field(EGU, "")
#   field(PREC, "2")
#   field(INP, "@$(eip_port) FVA.Trigger_Multiplier_RB[0]")
# }

# record(ao, "$(device):AVG_TIME") {
#   field(DTYP, "EtherIP")
#   #SCAN must be Passive, otherwise the changes on the GUI aren't picked sometimes
#   field(SCAN, "Passive")
#   field(PREC, "2")
#   field(DRVH, "1.5")
#   field(DRVL, "0.5")
#   #Scan rate has to be set with S flag when SCAN does not specify a fixed-value scan rate (see ether_ipApp/doc/readme.txt)
#   field(OUT, "@$(eip_port) FVA.Averaging_Time[0] S 0.5")
# }

# record(ai, "$(device):AVG_TIME_RBV") {
#   field(DTYP, "EtherIP")
#   field(SCAN, "1 second")
#   field(EGU, "")
#   field(PREC, "2")
#   field(INP, "@$(eip_port) FVA.Averaging_Time_RB[0]")
# }
