# digitelMpcIonp.template
#% macro, __doc__, Template database for digitel MPC - Ion Pump
# Pete Owens - 30/9/03
#
# substitutions:
#% macro, device, device name
#% macro, name, Object name and gui association name
#% macro, port, asyn serial port number
#% macro, unit, unit number for multi-drop serial (2 hex digits - 05 by default)
#% macro, pump, ion pump number (1 or 2)
#% macro, size, pump size (l/s)
#% macro, sp1on, setpoint1 on
#% macro, sp1off, setpoint1 off
#% macro, sp2on, setpoint2 on
#% macro, sp2off, setpoint2 off
#% macro, alh,  alarm handler tag (Defaults to None) c.f. mp49's commit 80833
#% macro, text, Text to display in the ion pump controller window.
#% macro, proto, StreamDevice Protocol definition file. Defaults to digitelMpc.proto
################################################################################

# This associates an edm screen with the template
# % gui, $(name=), edm, digitelMpcIonp2sp.edl, device=$(device)

# This associates BOY screens with the template
# % gui, $(name=), boydetail, digitelMpcApp_opi/ionp_detail.opi, device=$(device), desc=$(device), name=$(name=)
# % gui, $(name=), boyembed, digitelMpcApp_opi/ionp_embed_box.opi, device=$(device), desc=$(device), name=$(name=)
# % gui, $(name=), boyembed, digitelMpcApp_opi/ionp_embed.opi, device=$(device), desc=$(device), name=$(name=)

# These define what PVs a valve detail screen should contain
# % gui, $(name=), readback, Status,   $(device):STA
# % gui, $(name=), readback, Error Code,  $(device):ERR
# % gui, $(name=), readback, Voltage,  $(device):V
# % gui, $(name=), readback, Current,  $(device):I
# % gui, $(name=), readback, Strapping,  $(device):HV
# % gui, $(name=), enum, Start,  $(device):START
# % gui, $(name=), readback, Pump Size,  $(device):SIZE
# % gui, $(name=), demand, Pump Size,  $(device):SETSIZE
# % gui, $(name=), readback, Calibration,  $(device):CAL
# % gui, $(name=), demand, Calibration,  $(device):SETCAL
# % gui, $(name=), readback, Setpoint 1 On,  $(device):SP1ON
# % gui, $(name=), demand, Setpoint 1 On,  $(device):SETSP1ON
# % gui, $(name=), readback, Setpoint 1 Off,  $(device):SP1OFF
# % gui, $(name=), demand, Setpoint 1 Off,  $(device):SETSP1OFF
# % gui, $(name=), readback, Setpoint 2 On,  $(device):SP2ON
# % gui, $(name=), demand, Setpoint 2 On,  $(device):SETSP2ON
# % gui, $(name=), readback, Setpoint 2 Off,  $(device):SP2OFF
# % gui, $(name=), demand, Setpoint 2 Off,  $(device):SETSP2OFF

# Read pump current
#
#% controldesk Current readback
#
record(ai, "$(device):I") {
    field(DESC, "Pump Current")
    field(DTYP, "stream")
    field(INP,  "@$(proto=digitelMpc.proto) current($(unit),$(pump)) $(port)")
    field(SCAN, "1 second")
    field(EGU,  "A")
    field(LOPR, "0.0")
    field(HOPR, "10.0")
    field(PREC, "1")
}
################################################################################
# Read pump pressure
#
#% archiver 10 Monitor
#% controldesk Pressure readback
#
record(ai, "$(device):P") {
    field(DESC, "Pump Pressure")
    field(DTYP, "stream")
    field(INP,  "@$(proto=digitelMpc.proto) pressure($(unit),$(pump)) $(port)")
    field(SCAN, "1 second")
    field(FLNK, "$(device):PLOG")
    field(EGU,  "mbar")
    field(HOPR, "1000")
    field(LOPR, "1.0E-12")
    field(PREC, "11")
}
record(calcout, "$(device):ADEL")
{
    field(DESC, "deadband")
    field(CALC, "A/B")
    field(OUT,  "$(device):P.ADEL")
    field(INPA, "$(device):P")
#    field(INPB, "4")
#    field(INPB, "3")
    field(INPB, "2")
    field(SCAN, "10 second")
}
#
#% archiver 1 Monitor
#
record(calc, "$(device):PLOG")
{
    field(DESC, "log Pressure")
    field(EGU,  "log")
    field(CALC, "LOG(A)")
    field(INPA, "$(device):P MS")
    field(HOPR, "3")
    field(LOPR, "-12")
#    field(ADEL, "0.1")
#    field(ADEL, "0.125")
#    field(ADEL, "0.176")
    field(ADEL, "0.25")
}
################################################################################
# Read pump voltage
#
#% controldesk Voltage readback
#
record(longin, "$(device):V") {
    field(DESC, "Pump Voltage")
    field(DTYP, "stream")
    field(INP,  "@$(proto=digitelMpc.proto) voltage($(unit),$(pump)) $(port)")
    field(SCAN, "1 second")
    field(EGU,  "V")
    field(LOPR, "0")
    field(HOPR, "10")
}
################################################################################
# Get HV Strapping
#
#% archiver 1 Monitor
#% controldesk HV Strapping readback
#
record(longin, "$(device):HV") 
{
    field(DESC, "HV Strapping")
    field(DTYP, "stream")
    field(INP,  "@$(proto=digitelMpc.proto) strap($(unit),$(pump)) $(port)")
    field(SCAN, "10 second")
    field(EGU,  "V")
    field(LOPR, "5600")
    field(HOPR, "7000")
}
################################################################################
# Get supply status
#
#% archiver 10 Monitor
#% controldesk Supply Status smon
#% $(alh=None) $SEVRCOMMAND UP_ANY dls-alh-handler.py $(device):STA
record(mbbi, "$(device):STA")
{
    field(DESC, "Supply Status")
    field(DTYP, "stream")
    field(INP,  "@$(proto=digitelMpc.proto) status($(unit),$(pump)) $(port)")
    field(SCAN, "1 second")
    field(ZRST, "Unknown")
    field(ONST, "Waiting")
    field(TWST, "Standby")
    field(THST, "Safe-Conn")
    field(FRST, "Running")
    field(FVST, "Cool Down")
    field(SXST, "Pump Error")
    field(SVST, "HV Switched Off")
    field(EIST, "Interlock")
    field(NIST, "Shut Down")
    field(TEST, "Calibration")
    field(ELST, "Invalid")
    field(TVST, "Invalid")
    field(TTST, "Invalid")
    field(FTST, "Invalid")
    field(FFST, "Invalid")
    field(UNSV, "MAJOR")
    field(ZRSV, "MAJOR")
    field(ONSV, "MAJOR")
    field(TWSV, "MAJOR")
    field(THSV, "MAJOR")
    field(FRSV, "NO_ALARM")
    field(FVSV, "MINOR")
    field(SXSV, "MAJOR")
    field(SVSV, "MAJOR")
    field(EISV, "MAJOR")
    field(NISV, "MAJOR")
    field(TESV, "MAJOR")
    field(ELSV, "MAJOR")
    field(TVSV, "MAJOR")
    field(TTSV, "MAJOR")
    field(FTSV, "MAJOR")
    field(FFSV, "MAJOR")
    field(FLNK, "$(device):ERRSEL")
}

record(seq, "$(device):ERRSEQ")
{
    field(DESC, "Get Error if applicable")
    field(SCAN, "Passive")
    field(SELM, "Specified")
    field(SELN, "1")
    field(DOL1, "0")
    field(LNK1, "$(device):ERR PP MS")
    field(DOL2, "$(device):ERRGET PP MS")
    field(LNK2, "$(device):ERR PP MS")
}

record(longin, "$(device):ERRGET")
{
    field(DESC, "Get Error Code")
    field(DTYP, "stream")
    field(INP,  "@$(proto=digitelMpc.proto) err($(unit),$(pump)) $(port)")
    field(SCAN, "Passive")
}

record(calcout, "$(device):ERRSEL")
{
    field(DESC, "Choose which error source")
    field(INPA, "$(device):STA MS")
    field(CALC, "A>=3?2:1")
    field(OUT, "$(device):ERRSEQ.SELN PP MS")
}

#
#% archiver 10 Monitor
#% controldesk Error Code smon
#
record(mbbi, "$(device):ERR")
{
    field(DESC, "Error Code")
    field(DTYP, "Soft Channel")
    field(SCAN, "Passive")
    field(ZRST, "OK")
    field(ONST, "Too many cycles")
    field(TWST, "High pressure")
    field(THST, "High current")
    field(FRST, "High pressure")
    field(FVST, "Pump power")
    field(SXST, "High current")
    field(SVST, "Short circuit")
    field(EIST, "Malfunction")
    field(NIST, "Low voltage")
    field(TEST, "Arc detect")
    field(ELST, "11")
    field(TVST, "12")
    field(TTST, "13")
    field(FTST, "14")
    field(FFST, "15")
    field(UNSV, "MINOR")
    field(ZRSV, "NO_ALARM")
    field(ONSV, "MINOR")
    field(TWSV, "MINOR")
    field(THSV, "MINOR")
    field(FRSV, "MINOR")
    field(FVSV, "MINOR")
    field(SXSV, "MINOR")
    field(SVSV, "MINOR")
    field(EISV, "MINOR")
    field(NISV, "MINOR")
    field(TESV, "MINOR")
    field(ELSV, "MINOR")
    field(TVSV, "MINOR")
    field(TTSV, "MINOR")
    field(FTSV, "MINOR")
    field(FFSV, "MINOR")
}
################################################################################
# Pump size
#
#% archiver 10 Monitor
#% controldesk Pump Size readback
#
record(longin, "$(device):SIZE") {
    field(DESC, "Pump Size")
    field(DTYP, "stream")
    field(INP,  "@$(proto=digitelMpc.proto) size($(unit),$(pump)) $(port)")
    field(SCAN, "10 second")
    field(EGU,  "l/s")
    field(LOPR, "0")
    field(HOPR, "1200")
}
#
#% archiver 10 Monitor
#% controldesk Pump Size setpoint
#
record(ao, "$(device):SETSIZE") {
    field(DESC, "Pump Size")
    field(DTYP, "stream")
    field(OUT,  "@$(proto=digitelMpc.proto) setsize($(unit),$(pump)) $(port)")
    field(PINI, "YES")
    field(DOL,  "$(size)")
    field(EGU,  "l/s")
    field(DRVL, "0")
    field(DRVH, "1200")
    field(LOPR, "0")
    field(HOPR, "1200")
    field(PREC, "0")
}
################################################################################
# Calibration factor
#
#% archiver 10 Monitor
#% controldesk Calibration Factor readback
#
record(ai, "$(device):CAL") {
    field(DESC, "Calibration Factor")
    field(DTYP, "stream")
    field(INP,  "@$(proto=digitelMpc.proto) cal($(unit),$(pump)) $(port)")
    field(SCAN, "10 second")
    field(LOPR, "0.0")
    field(HOPR, "9.99")
    field(PREC, "2")
}
#
#% archiver 10 Monitor
#% controldesk Calibration Factor setpoint
#
record(ao, "$(device):SETCAL") {
    field(DESC, "Calibration Factor")
    field(DTYP, "stream")
    field(OUT,  "@$(proto=digitelMpc.proto) setcal($(unit),$(pump)) $(port)")
    field(DRVL, "0.0")
    field(DRVH, "9.99")
    field(LOPR, "0.0")
    field(HOPR, "9.99")
    field(PREC, "2")
}
################################################################################
# Start
#
#% archiver 10 Monitor
#% controldesk Supply Status scon
#
record(bo, "$(device):START")
{
    field(DESC, "HV on/off")
    field(DTYP, "stream")
    field(OUT,  "@$(proto=digitelMpc.proto) start($(unit),$(pump)) $(port)")
    field(ZNAM, "Stop")
    field(ONAM, "Start")
}
record(bi,"$(device):STARTING")
{
    field(DESC, "Starting Pumps")
    field(PINI, "YES")
    field(INP,  "0")
    field(ZNAM, "")
    field(ONAM, "Starting")
}

################################################################################
# Setpoints
#
# The MPC and MPCe controllers have four setpoints. Each setpoint has associated
# with it an ON pressure, an OFF pressure and a supply.
# Each pump on the controller is allocated two of the setpoints (pump setpoints 1 & 2).
# The following table describes the mapping of controller setpoints and supplies to
# each pump.
# I Gillingham: April 2015
#
#  Pump number   Pump_Setpoint Controller_Setpoint   Supply  
#      1             1                   1             1
#      2             1                   2             2
#      1             2                   3             1
#      2             2                   4             2

## ----------------- SP1 -------------------------------
#
# -----------------------------------------------------------------------------------------
# These two records work together to provide one scan
# to correctly initialise the SETSPS1 and SETSPS2 records just once
# at startup.
#
record(bo, "$(device):INIT:SETSPSDIS") 
    {
    field(DTYP, "Soft Channel")
    field(VAL, "1")
    field(OUT, "$(device):INIT:SETSPSEQ.DISA")
    }
#
# 1) Get the instrument value for SP1 ON/OFF
# 1a) Wait one second for :RQSTSP1ON to complete and populate :SP1OFF and :SP1ON
# 2) Disable instrument update of setting SP1 ON/OFF
# 3) LOAD SETSP1OFF with SP1OFF
# 4) LOAD SETSP1ON with SP1ON
# 5) Enable instrument update of setting SP1 ON/OFF
# 6) Process seq for SP2
# 7) Disable this seq record from processing again
record(seq, "$(device):INIT:SETSPSEQ") 
    {
    field(SCAN, "1 second")
    field(SELM, "All")
    field(LNK1, "$(device):RQSTSP1ON PP")
    field(LNK2, "$(device):SETSPS1.DISA PP")
    field(LNK3, "$(device):SETSP1OFF PP")
    field(LNK4, "$(device):SETSP1ON PP")
    field(LNK5, "$(device):SETSPS1.DISA PP")
    field(LNK6, "$(device):INIT:SETSP2SEQ PP")
    field(LNK7, "$(device):INIT:SETSPSDIS PP")
    field(DLY1, "0")
    field(DLY2, "3.0")
    field(DLY3, "0")
    field(DLY4, "0")
    field(DLY7, "0")
    field(DOL1, "0")
    field(DOL2, "1")
    field(DOL3, "$(device):SP1OFF")
    field(DOL4, "$(device):SP1ON")
    field(DOL5, "0")
    field(DOL6, "0")
    field(DOL7, "1")
    }
    
# 1) Get the instrument value for SP2 ON/OFF
# 1a) Wait one second for :RQSTSP2ON to complete and populate :SP2OFF and :SP2ON
# 2) Disable instrument update of setting SP2 ON/OFF
# 3) LOAD SETSP2OFF with SP2OFF
# 4) LOAD SETSP2ON with SP2ON
# 5) Enable instrument update of setting SP2 ON/OFF
record(seq, "$(device):INIT:SETSP2SEQ")
    {
    field(SELM, "All")
    field(LNK1, "$(device):RQSTSP2ON PP")
    field(LNK2, "$(device):SETSPS2.DISA PP")
    field(LNK3, "$(device):SETSP2OFF PP")
    field(LNK4, "$(device):SETSP2ON PP")
    field(LNK5, "$(device):SETSPS2.DISA PP")
    field(DLY1, "0")
    field(DLY2, "3.0")
    field(DLY3, "0")
    field(DLY4, "0")
    field(DOL1, "0")
    field(DOL2, "1")
    field(DOL3, "$(device):SP2OFF")
    field(DOL4, "$(device):SP2ON")
    field(DOL5, "0")
    }



# Although requesting SPS is logically an input, a calcout has been 
# used here to allow the return values to be injected directly into the 
# given record names via input links.
#
# Record RQSTSP1OFF is I/O Intr and gets (a copy of) any input, including input that was directed to record RQSTSP1ON
# Record RQSTSP1STATE is I/O Intr and gets (a copy of) any input, including input that was directed to record RQSTSP1ON
 
# sps: Parameter 1) Unit number   2) Device base name    3) Logical setpoint number for this pump (1 | 2) - gets converted to actual setpoint in protocol.
record(ai, "$(device):RQSTSP1ON") 
    {
    field(DESC, "Rqst Setpoint1")
    field(DTYP, "stream")
    field(SCAN, "Passive")
    field(INP,  "@$(proto=digitelMpc.proto) getsps($(unit),$(device),1) $(port)")
    field(PINI, "NO")
    }

# sps: Parameter 1) Unit number   2) Device base name    3) Logical setpoint number for this pump (1 | 2).
record(ai, "$(device):RQSTSP2ON") 
    {
    field(DESC, "Rqst Setpoint2")
    field(DTYP, "stream")
    field(SCAN, "Passive")
    field(INP,  "@$(proto=digitelMpc.proto) getsps($(unit),$(device),2) $(port)")
    field(PINI, "NO")
    }


#% archiver 10 Monitor
#% controldesk Setpoint 1 readback
# This PV is written to directly from the protocol (sps) return string
#
record(ai, "$(device):SP1ON") 
    {
    field(DESC, "Setpoint 1 On")
    field(DTYP, "Soft Channel")
    field(EGU,  "mbar")
    field(LOPR, "0.0")
    field(HOPR, "1000.0")
    field(PREC, "1")
    }
#
#% archiver 10 Monitor
#% controldesk Setpoint 1 readback
#
# This PV is written to directly from the protocol (sps) return string
record(ai, "$(device):SP1OFF") 
    {
    field(DESC, "Setpoint 1 Off")
    field(EGU,  "mbar")
    field(LOPR, "0.0")
    field(HOPR, "1000.0")
    field(PREC, "1")
    }
# This PV is written to directly from the protocol (sps) return string
record(bi,"$(device):SP1STATE")
    {
    field(DESC, "Setpoint 1 State")
    field(PINI, "NO")
    field(INP,  "0")
    field(ZNAM, "Off")
    field(ONAM, "On")
    }
#
#% archiver 10 Monitor
#% controldesk Setpoint 1 setpoint
#
record(ao, "$(device):SETSP1ON") 
    {
    field(VAL,  "$(sp1on=1.0E-7)")
    field(DESC, "Setpoint 1 On")
    field(EGU,  "mbar")
    field(DRVL, "1.0E-10")
    field(DRVH, "1.0E-4")
    field(LOPR, "0.0")
    field(HOPR, "1000.0")
    field(PREC, "1")
    field(FLNK, "$(device):SETSPS1")
    }
#
#% archiver 10 Monitor
#% controldesk Setpoint 1 Off setpoint
#
record(ao, "$(device):SETSP1OFF") 
    {
    field(VAL,  "$(sp1off=2.0E-7)")
    field(DESC, "Setpoint 1 Off")
    field(EGU,  "mbar")
    field(DRVL, "1.0E-10")
    field(DRVH, "1.0E-4")
    field(LOPR, "0.0")
    field(HOPR, "1000.0")
    field(PREC, "1")
    field(FLNK, "$(device):SETSPS1")
    }

# NB: INPF is written to by :SPNUM1 on PINI
#     The supply number is equivalent to pump number (1 | 2)
#
# INPA => Setpoint ON pressure
# INPB => Setpoint OFF pressure
# INPC => Source (usually equivalent to pump [1|2])
# INPD => Lower pressure working limit
# INPE => Upper pressure working limit
# INPF => Setpoint interlock number [1..4]
#
record(calcout, "$(device):SETSPS1") 
    {
    field(DESC, "Output Setpoints")
    field(DTYP, "stream")
    field(OUT,  "@$(proto=digitelMpc.proto) setsps($(unit),$(device),1) $(port)")
##    field(OUT,  "@$(proto=digitelMpc.proto) setsps($(unit),$(pump)) $(port)")
    field(INPA, "$(device):SETSP1ON")
    field(INPB, "$(device):SETSP1OFF")
    field(INPC, "$(pump)")
    field(INPD, "1.01E-10")
    field(INPE, "9.99E-5")
    field(INPF, "$(device):SPNUM1")
    field(CALC, "((A<D)||(B>E)||(F<1))?0:F")
    field(OOPT, "When Non-zero")
    field(PINI, "NO")
    field(FLNK, "$(device):RQSTSP1ON")
    }


## ----------------- SP2 -------------------------------

#% archiver 10 Monitor
#% controldesk Setpoint 2 readback
#
# This PV is written to directly from the protocol (sps) return string
record(ai, "$(device):SP2ON") 
    {
    field(DESC, "Setpoint 2 On")
    field(EGU,  "mbar")
    field(LOPR, "0.0")
    field(HOPR, "1000.0")
    field(PREC, "1")
    }
#
#% archiver 10 Monitor
#% controldesk Setpoint 2 readback
#
# This PV is written to directly from the protocol (sps) return string
record(ai, "$(device):SP2OFF") 
    {
    field(DESC, "Setpoint 2 Off")
    field(EGU,  "mbar")
    field(LOPR, "0.0")
    field(HOPR, "1000.0")
    field(PREC, "1")
    }
# This PV is written to directly from the protocol (sps) return string
record(bi,"$(device):SP2STATE")
    {
    field(DESC, "Setpoint 2 State")
    field(PINI, "NO")
    field(INP,  "0")
    field(ZNAM, "Off")
    field(ONAM, "On")
    }
#
#% archiver 10 Monitor
#% controldesk Setpoint 2 setpoint
#
record(ao, "$(device):SETSP2ON") 
    {
    field(VAL,  "$(sp2on=1.0E-7)")
    field(DESC, "Setpoint 2 On")
    field(EGU,  "mbar")
    field(DRVL, "1.0E-10")
    field(DRVH, "1.0E-4")
    field(LOPR, "0.0")
    field(HOPR, "1000.0")
    field(PREC, "1")
    field(FLNK, "$(device):SETSPS2")
    }
#
#% archiver 10 Monitor
#% controldesk Setpoint 2 Off setpoint
#
record(ao, "$(device):SETSP2OFF") 
    {
    field(VAL,  "$(sp2off=2.0E-7)")
    field(DESC, "Setpoint 2 Off")
    field(EGU,  "mbar")
    field(DRVL, "1.0E-10")
    field(DRVH, "1.0E-4")
    field(LOPR, "0.0")
    field(HOPR, "1000.0")
    field(PREC, "1")
    field(FLNK, "$(device):SETSPS2")
    }

# NB: INPF is written to by :SPNUM2 on PINI
# INPA => Setpoint ON pressure
# INPB => Setpoint OFF pressure
# INPC => Source (usually equivalent to pump [1|2])
# INPD => Lower pressure working limit
# INPE => Upper pressure working limit
# INPF => Setpoint interlock number [1..4]
#
record(calcout, "$(device):SETSPS2") 
    {
    field(DESC, "Output Setpoints")
    field(DTYP, "stream")
    field(OUT,  "@$(proto=digitelMpc.proto) setsps($(unit),$(device),1) $(port)")
##    field(OUT,  "@$(proto=digitelMpc.proto) setsps($(unit),$(pump)) $(port)")
    field(INPA, "$(device):SETSP2ON")
    field(INPB, "$(device):SETSP2OFF")
    field(INPC, "$(pump)")
    field(INPD, "1.01E-10")
    field(INPE, "9.99E-5")
    field(INPF, "$(device):SPNUM2")    
    field(CALC, "((A<D)||(B>E)||(F<1))?0:F")
    field(OOPT, "When Non-zero")
    field(PINI, "NO")
    field(FLNK, "$(device):RQSTSP2ON")
    }


# Calculate the controller setpoint number for this pump
# Each setpoint has an ON and an OFF pressure attribute.
# Pump  Pump Setpoint  Controller Setpoint
#   1       1                    1
#   1       2                    3
#   2       1                    2
#   2       2                    4

record(calc, "$(device):SPNUM1") 
    {
    field(DESC, "Controller setpoints number Pump 1")
    field(INPA, "$(pump)")
    field(CALC, "(A>1)?2:1")
    field(PINI, "YES")
    # field(FLNK, "$(device):SETSPS1")
    }

record(calc, "$(device):SPNUM2") 
    {
    field(DESC, "Controller setpoints number Pump 2")
    field(INPA, "$(pump)")
    field(CALC, "(A>1)?4:3")
    field(PINI, "YES")
    # field(FLNK, "$(device):SETSPS2")
    }


################################################################################
# Text string on front panel if MPC is not the MPC2 
# MPC2 has no settext command due to the lack of an LCD display
#
record(mbbi, "$(device):MPC_MODEL")
{
    field(DESC, "Model Number")
    field(DTYP, "stream")
    field(INP,  "@$(proto=digitelMpc.proto) model($(unit)) $(port)")
    field(SCAN, "Passive")
    field(ZRST, "MPC2")
    field(ONST, "MPCe")
    field(TWST, "MPCq")
    field(THST, "QPC")
    field(PINI, "YES")
    field(FLNK, "$(device):SETTEXT_PROC PP")
}

record(calcout, "$(device):SETTEXT_PROC") {
    field(DESC, "Prevents SETTEXT if MPC2")
    field(CALC, "A>0?1:0")
    field(INPA, "$(device):MPC_MODEL")
    field(OOPT, "When Non-zero")
    field(OUT,  "$(device):SETTEXT.PROC PP")
}

record(stringout, "$(device):SETTEXT") {
    field(DESC, "Text String")
    field(VAL , "$(text=$(device))")
    field(DTYP, "stream")
    field(OUT,  "@$(proto=digitelMpc.proto) settext($(unit),$(pump),$(disptext=$(device))) $(port)")
    field(PINI, "NO")
}
################################################################################

################################################################################
# Text error message
#
record(stringin, "$(device):ERROR") 
    {
    field(DESC, "Last error message")
    }

# PINI set to ensure the record is initialised with TIMEOUT status,
# which will only change to OK once communication starts.
record(mbbi, "$(device):COMMS")
    {
    field(DESC, "Communication Status")
    field(DTYP, "Soft Channel")
    field(SCAN, "Passive")
    field(ZRST, "TIMEOUT")
    field(ONST, "OK")
    field(INP, "0")
    field(PINI, "YES")
    }

record(scalcout, "$(device):COMMSMATCH")
    {
    field(INAA, "$(device):P.STAT MS CP")
    field(CALC, "printf('%d',AA!='TIMEOUT'?1:0)")
    field(OOPT, "Every Time")
    field(DOPT, "Use CALC")
    field(OUT, "$(device):COMMS PP MS")
    }
